import { useState, useEffect } from 'react';
import Head from 'next/head'
import { FaExternalLinkAlt } from 'react-icons/fa';
import {
  ApolloClient,
  InMemoryCache,
  gql
} from "@apollo/client";
import center from '@turf/center';
import { points } from '@turf/helpers';

import Layout from '@components/Layout';
import Container from '@components/Container';
import Button from '@components/Button';
import Map from '@components/Map';

import styles from '@styles/Page.module.scss'

export default function Stores({ stroeLocations }) {
  const [activeStore, setActiveStore] = useState();
  
  const features = points(stroeLocations.map(({ localizacion }) => {
    return [localizacion.latitude, localizacion.longitude]
  }));

  const [defaultLatitude, defaultLongitude] = center(features)?.geometry.coordinates;

  return (
    <Layout>
      <Head>
        <title>Contáctenos</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container>
        <h1>Contactarse con nosotros</h1>

        <div className={styles.stores}>

          <div className={styles.storesLocations}>
            <ul className={styles.locations}>
              {stroeLocations.map(location => {
                function handleOnclick() {
                  setActiveStore(location.id);
                }
                return (
                  <li key={location.id}>
                    <p className={styles.locationName}>
                      Correo: { location.correo }
                    </p>
                    <p className={styles.locationName}>
                    Teléfono: { location.telefono }
                    </p>
                  </li>
                )
              })}
              
            </ul>
          </div>
        </div>

        <h1>Nuestro Almacén</h1>

        <div className={styles.stores}>

          <div className={styles.storesLocations}>
            <ul className={styles.locations}>
              {stroeLocations.map(location => {
                function handleOnclick() {
                  setActiveStore(location.id);
                }
                return (
                  <li key={location.id}>
                    <p className={styles.locationName}>
                      { location.name }
                    </p>
                    <address>
                    { location.direccion }
                    </address>
                    <p className={styles.locationDiscovery}>
                      <button onClick={handleOnclick}>
                        Ver Mapa
                      </button>
                      <a href={`https://www.google.com/maps/dir//${location.localizacion.latitude},${location.localizacion.longitude}/@${location.localizacion.latitude},${location.localizacion.longitude},19.99z/`} target="_blank" rel="noreferrer">
                        Obtener la Dirección
                        <FaExternalLinkAlt />
                      </a>
                    </p>
                  </li>
                )
              })}
              
            </ul>
          </div>

          <div className={styles.storesMap}>
            <div className={styles.storesMapContainer}>
              <Map className={styles.map} center={[defaultLatitude, defaultLongitude]} zoom={4} scrollWheelZoom={false}>
                {({ TileLayer, Marker, Popup }, map) => {
                  const MapEffect = () => {
                    useEffect(() => {
                      if ( !activeStore ) return;
                      const { localizacion } = stroeLocations.find(({ id }) => id === activeStore);
                      map.setView([localizacion.latitude, localizacion.longitude], 14)
                    }, [activeStore])
                    return null;
                  }
                  return (
                    <>
                      <MapEffect />
                      <TileLayer
                          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                        />
                        {stroeLocations.map(location => {
                          const { latitude, longitude } = location.localizacion;
                          return (
                            <Marker position={[latitude, longitude]}>
                              <Popup>
                                <p>{ location.name }</p>
                                <p>{ location.direccion }</p>
                              </Popup>
                            </Marker>
                          )
                        })}
                        
                    </>
                  )
                }}
              </Map>
            </div>
          </div>
        </div>
      </Container>
    </Layout>
  )
}

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: 'https://api-sa-east-1.hygraph.com/v2/clhosnmjx69z101um63w459u3/master',
    cache: new InMemoryCache(),
  });

  const data = await client.query({
    query: gql`
      query PageStores {
        stroeLocations {
          correo
          telefono
          direccion
          id
          name
          localizacion {
            latitude
            longitude
          }
        }
      }
    `
  })

  const stroeLocations = data.data.stroeLocations;

  return {
    props: {
      stroeLocations
    }
  }
}